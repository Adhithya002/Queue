145. Binary Tree Postorder Traversal

Given the root of a binary tree, return the postorder traversal of its nodes' values.

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        postOrder(root,list);
        return list;
    }
    public void postOrder(TreeNode root,List<Integer> list) {
        if(root == null) {
            return;
        } 
        postOrder(root.left,list);
        postOrder(root.right,list);
        list.add(root.val);
    } 
}

144. Binary Tree Preorder Traversal

Given the root of a binary tree, return the preorder traversal of its nodes' values.

class Solution {

    public void traversal(TreeNode root, List<Integer> res) {

        // Return if the current node is null
        // base case
        if (root == null) return;

        // Add the current node's value to the result list
        res.add(root.val);

        // Recursively traverse the left and right subtrees
        traversal(root.left, res);
        traversal(root.right, res);
    }

    public List<Integer> preorderTraversal(TreeNode root) {
        
        // Creating a list to store the traversal result
        // Initialization
        List<Integer> res = new ArrayList<>();

        // To perform the traversal
        traversal(root, res);

        // Return the result
        return res;
    }
}

94. Binary Tree Inorder Traversal

Given the root of a binary tree, return the inorder traversal of its nodes' values

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result=new ArrayList<>();
        tree(root,result);
        return(result);
    }
    public void tree(TreeNode root ,List<Integer> result ){
        if(root==null){
            return;
        }
        tree(root.left,result);
        result.add(root.val);
        tree(root.right,result);
    }
}

239. Sliding Window Maximum

You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
  
        Deque<Integer> q=new ArrayDeque<>();
        int j=0;
        int ans[]=new int[nums.length-k+1];
        int i=0;
        for(i=0;i<k;i++){
            while(!q.isEmpty()&&nums[i]>=nums[q.peekLast()]){
                q.removeLast();
            }
            q.addLast(i);
        }
        for(int index=i;index<nums.length;index++){
            ans[j++]=nums[q.peek()];
            while(!q.isEmpty() && q.peek() <= index-k){
                q.removeFirst();
            }
            while(!q.isEmpty() && nums[index] >= nums[q.peekLast()]){
                q.removeLast();
            }
            q.addLast(index);
        }
        ans[j] = nums[q.peek()];
        return ans;
    
    }
}